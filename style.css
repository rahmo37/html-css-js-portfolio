/*! General Styling */
@import url("https://fonts.googleapis.com/css2?family=Rancho&display=swap");

* {
  margin: 0;
  padding: 0;
}

body {
  font-family: "Rancho", cursive;
}

/** By setting this behavior at the html level, you're essentially applying a default for the entire document. and you are setting a global scroll behavior for the entire page */
html {
  scroll-behavior: smooth;
}

p {
  color: rgb(85, 85, 85);
}

/*! Transition Styling */

/** The CSS rule transition: all 300ms ease; means that any change to any CSS property of the element will take 300 milliseconds to occur, and the speed of this transition will follow an "ease" timing function, making the animation start slow, become faster in the middle, and then slow down at the end. */
a,
.btn {
  transition: all 300ms ease;
}

/*! Desktop Nav Styling */

/** This CSS rule sets both the nav element and any elements with the class .nav-links to display as flex containers. This makes it easier to arrange their child elements in a row or column layout. */
nav,
.nav-links {
  display: flex;
}
/** justify-content: space-around, Creates space between every child element of nav */
/** height: 17vh; whatever the hight of the whole window, it will only take the 17% */
nav {
  justify-content: space-around;
  align-items: center;
  height: 17vh;
}

/** gap: 2rem of gap between each link*/
/** list-style: none, no list style*/
.nav-links {
  gap: 2rem;
  list-style: none;
  font-size: 2rem;
}

/** Decoration has been changed from underline to none, text color black */
a {
  color: black;
  text-decoration: none;
  text-decoration-color: rgb(255, 255, 255);
}

a:hover {
  color: grey;
  text-decoration: underline;
  text-underline-offset: 1rem;
  text-decoration-color: rgb(181, 181, 181);
}

.logo {
  font-weight: 600;
  font-size: 2.5rem;
}

.logo:hover {
  cursor: default;
}

/*! Styling Hamburger Menu */

#hamburger-nav {
  display: none;
}

/** position: relative;: This means the "hamburger menu" will stay where it's supposed to be on the webpage, but now you can move it around a bit if you want to, like sliding it up or down, left or right from where it normally is. */

/**  display: inline-block;: This means the "hamburger menu" will act a bit like text, meaning it will sit on the same line as other items like text or images. But, unlike text, you can give it a specific size like height and width. */

/** all together, these settings mean that your "hamburger menu" will be on the same line as other things like text, and you have the freedom to move it slightly without messing up the rest of the layout. */

.hamburger-menu {
  position: relative;
  display: inline-block;
}

.hamburger-icon {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 24px;
  width: 30px;
  cursor: pointer;
}

.hamburger-icon span {
  width: 100%;
  height: 2px;
  background-color: black;
  transition: all 0.3 ease-in-out;
}

/** position: absolute;: Puts the menu links in a fixed spot within a relative or absolute positioned parent element.

top: 100%;: Places the top edge of the menu links just below the bottom edge of the parent element.

right: 0;: Aligns the menu links to the right edge of the parent element.

background-color: white;: Makes the background color of the menu links white.

width: fit-content;: Makes the menu width just as wide as the content it holds, no more, no less.

max-height: 0;: Starts the menu height at zero, basically making it invisible to start with.

overflow: hidden;: Hides any content that might spill out of the menu's boundaries.

transition: all 0.3 ease-in-out;: Makes any changes to the menu happen smoothly over 0.3 seconds. (Note: the correct format should be transition: all 0.3s ease-in-out; - you forgot the 's' for seconds.)

So overall, these settings help to create a menu that is hidden by default, sits below a parent element, and will show or hide smoothly when triggered. */

/** Also 
since the position of .hamburger-menu is set to relative, and the position of .menu-links is set to absolute, then .menu-links will be positioned absolutely within .hamburger-menu. .menu-links will be positioned relative to .hamburger-menu and will appear just below it when its height is expanded from 0
*/

.menu-links {
  position: absolute;
  top: 100%;
  right: 0;
  background-color: white;
  width: fit-content;
  max-height: 0;
  overflow: hidden;
  transition: all 0.3 ease-in-out;
}

.menu-links a {
  display: block;
  padding: 10px;
  text-align: center;
  font-size: 1.5rem;
  color: black;
  text-decoration: none;
  transition: all 0.3 ease-in-out;
}

.menu-links li {
  list-style: none;
}

.menu-links.open {
  max-height: 300px;
}

.hamburger-icon.open span:first-child {
  transform: rotate(45deg) translate(10px, 5px);
}

.hamburger-icon.open span:nth-child(2) {
  opacity: 0;
}

.hamburger-icon.open span:last-child {
  transform: rotate(-45deg) translate(10px, -5px);
}

.hamburger-icon span:first-child {
  transform: none;
}

.hamburger-icon span:first-child {
  opacity: 1;
}

.hamburger-icon span:first-child {
  transform: none;
}

/*! Section Styling */
/* What is box-sizing: border-box;?
It's a setting in CSS that makes sure the size you set for a box includes everything: the content, padding, and border. So if you set the box to be 100 pixels wide, that will include the content, the padding, and the border, making layout planning easier and more predictable. */
section {
  padding-top: 4vh;
  height: 96vh;
  margin: 0 10rem;
  box-sizing: border-box;
  max-height: fit-content;
}

.section-container {
  display: flex;
}

/*! Profile Section  */
#profile-pic {
  border-radius: 12rem;
}

#profile {
  display: flex;
  justify-content: center;
  gap: 5rem;
  height: 80vh;
}

.section__pic-container {
  display: flex;
  height: 400px;
  width: 400px;
  margin: auto 0;
}

/** The align-self property in CSS is used for aligning a single item inside a flexbox or grid container. When you set align-self: center; on an item, it means you want to center that specific item along the cross-axis of the container. */
.section__text {
  align-self: center;
  text-align: center;
}

.section__text p {
  font-weight: 600;
}

.section__text__p1 {
  text-align: center;
  font-size: 1.5rem;
}

.section__text__p2 {
  font-size: 1.75rem;
  margin-bottom: 1rem;
}

.title {
  font-size: 3rem;
  text-align: center;
  margin-bottom: 0.4rem;
}

#socials-container {
  display: flex;
  justify-content: center;
  margin-top: 1rem;
  gap: 1rem;
}

/*! Icon Styling */

.icon {
  cursor: pointer;
  height: 2rem;
}

/*! Button Styling */

.btn-container {
  display: flex;
  justify-content: center;
  gap: 1rem;
}

.btn {
  font-weight: 600;
  transition: all 300ms ease;
  padding: 1rem;
  width: 8rem;
  border-radius: 2rem;
}

.btn-color-1,
.btn-color-2 {
  border: rgb(53, 53, 53) 0.1rem solid;
}

.btn-color-1:hover,
.btn-color-2:hover {
  cursor: pointer;
}

.btn-color-1,
.btn-color-2:hover {
  background: rgb(53, 53, 53);
  color: white;
}

.btn-color-1:hover {
  background: rgb(0, 0, 0);
}

.btn-color-2 {
  background: none;
}

.btn-container {
  gap: 1rem;
}

/*! About Section */
#about {
  position: relative;
}

.about-containers {
  gap: 2rem;
  margin-bottom: 2rem;
  margin-top: 2rem;
}

.about-details-container {
  justify-content: center;
  flex-direction: column;
}

.about-containers,
.about-details-container {
  display: flex;
}

.about-pic {
  border-radius: 2rem;
}

.arrow {
  position: absolute;
  right: -5rem;
  bottom: 2.5rem;
}

.details-container {
  padding: 1.5rem;
  flex: 1;
  background: white;
  border-radius: 2rem;
  border: rgb(53, 53, 53) 0.1rem solid;
  border-color: rgb(163, 163, 163);
  text-align: center;
}

.details-container h3 {
  font-weight: bold;
  font-size: 30px;
}

.details-container p {
  font-size: 25px;
}

.section-container {
  gap: 4rem;
  height: 80%;
}

.section__pic-container {
  height: 400px;
  width: 400px;
  margin: auto 0;
}

.text-container p {
  font-size: 25px;
  font-weight: 600;
}

/*! Experience Section Styeing */
#experience {
  position: relative;
}

.experience-sub-title {
  color: rgb(85, 85, 85);
  font-weight: 600;
  font-size: 1.75rem;
  margin-bottom: 2rem;
}

.experience-details-container {
  display: flex;
  justify-content: center;
  flex-direction: column;
}

.article-container {
  display: flex;
  text-align: center;
  flex-wrap: wrap;
  flex-direction: row;
  gap: 2.5rem;
  justify-content: space-around;
}

article {
  display: flex;
  width: 10rem;
  gap: 0.5rem;
}

article .icon {
  cursor: default;
}

#hyper,
#cisco,
#windows {
  margin-left: -3px;
}

#windows {
  margin-left: -15px;
}

#bash {
  margin-left: -15px;
}

#wire {
  margin-left: 10px;
}

/*! Project Section Styling */

#projects {
  position: relative;
}

.color-container {
  border-color: rgb(163, 163, 163);
  background: (250, 250, 250);
}

.project-img {
  border-radius: 2rem;
  width: 90%;
  height: 90%;
}

.project-title {
  margin: 1rem;
  color: black;
}

.project-btn {
  color: black;
  border-color: rgb(163, 163, 163);
}

/*! Style Contact Page */

#contact {
  display: flex;
  justify-content: center;
  flex-direction: column;
  height: 70vh;
}

.contact-info-upper-container {
  display: flex;
  justify-content: center;
  border-radius: 2rem;
  border: rgb(53, 53, 53) 0.1rem solid;
  border-color: rgb(163, 163, 163);
  background: (250, 250, 250);
  margin: 2rem auto;
  padding: 0.5rem;
}

.contact-info-container {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  margin: 1rem;
}

.contact-info-container p {
  font-size: 30px;
}

.contact-icon {
  cursor: default;
}

.email-icon {
  height: 2, 5rem;
}

/* ! Footer Styling */
footer {
  height: 26vh;
  margin: 0 1rem;
}

footer p {
  text-align: center;
}
